{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","setCategories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAiB1C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAY,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,OAKd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCLlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACE,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNDK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAaZY,GAbY,4CAAH,sDCIPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GAGFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAItB,CAACd,IAEGe,EDlByBK,CAAapB,GAAhCW,EAFsB,EAE5BL,KAAcQ,EAFc,EAEdA,QAErB,OACI,oCACI,wBAAIlB,UAAU,qCAAqCI,GAClDc,GAAW,uBAAGlB,UAAU,qCAAb,cACZ,yBAAKA,UAAU,aAEPe,EAAOH,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIY,IAAKZ,EAAIC,IACLD,UEQjBa,EArBM,WAAM,MAGnB1C,mBAAS,CAAC,WAHS,mBAEhBQ,EAFgB,KAEJmC,EAFI,KAKvB,OACI,6BACI,8CACA,kBAAC,EAAD,CAAa5C,YAAa4C,IAC1B,6BACA,4BAEQnC,EAAWoB,KAAI,SAAAR,GACX,OAAO,kBAAC,EAAD,CAASqB,IAAKrB,EAAUA,SAAUA,UCZjEwB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.dc85ac1a.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategory}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); // Evitamos que haga postback\r\n\r\n        // Validamos\r\n        if (inputValue.trim().length > 2) {\r\n            // De esta forma accedemos al arreglo que posee al contenido del estado que posee el componente. Con el callback\r\n            setCategory(categories => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\n\r\n// todo: si no asignamos un valor inicial al useState, el componente tendrá 'undefined' como estado inicial y eso nos dará un error\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n          <img src={url} alt={title} />\r\n          <p>{title}</p>\r\n      </div>\r\n    );\r\n};\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CK50W5xEQBI8XCa0KIMQEfizH6wGq7tR`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n};\r\n","import React from \"react\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({category}) => {\r\n    // llamamos a nuestro custom hook\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__fadeIn\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n// TODO: useEffect() => nos permite controlar la cantidad de llamadas a una fn en especifico\r\n// TODO: encodeURI() => transforma un string a formato válido para las strings enviados por URL\r\n// para renombrar un valor recibido por desestructuración utilizamos ':' más el nuevo nombre. EJ: data:images\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n// TODO: Creamos un custom hook\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                // Aplicamos un retraso para visualizar el loading\r\n                // setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n                // }, 3000)\r\n            })\r\n    }, [category]) // se disparará el useEffect() cada vez que category cambie\r\n\r\n    return state;\r\n}\r\n\r\n// los useEffect() no pueden ser async\r\n","import React, {useState} from \"react\";\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    // Declaramos nuestro estado (hook)\r\n    const [categories, setCategories] =\r\n        useState(['Naruto']);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategory={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                        return <GifGrid key={category} category={category} />\r\n                    })\r\n                }\r\n            </ol>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n\r\n// El key no puede ser el indice del arreglo\r\n\r\n// De esta forma podemos manipular arreglos que estan dentro de nuestro state\r\n// const handleAdd = () => {\r\n//     // setCategories([...categories, 'Detective Conan']);\r\n//     setCategories(cat => ['Detective Conan', ...categories]);\r\n// }\r\n\r\n// TODO: Custom Hooks => no es más que una forma de extraer lógica para reutilizarla\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}